diff --git a/node_modules/@auth/drizzle-adapter/lib/sqlite.js b/node_modules/@auth/drizzle-adapter/lib/sqlite.js
index 0cbeaf3..1082623 100644
--- a/node_modules/@auth/drizzle-adapter/lib/sqlite.js
+++ b/node_modules/@auth/drizzle-adapter/lib/sqlite.js
@@ -51,17 +51,17 @@ export function SQLiteDrizzleAdapter(client, tableFn = defaultSqliteTableFn) {
                 .returning()
                 .get();
         },
-        getUser(data) {
-            return client.select().from(users).where(eq(users.id, data)).get() ?? null;
+        async getUser(data) {
+            return await client.select().from(users).where(eq(users.id, data)).get() ?? null;
         },
-        getUserByEmail(data) {
-            return (client.select().from(users).where(eq(users.email, data)).get() ?? null);
+        async getUserByEmail(data) {
+            return (await client.select().from(users).where(eq(users.email, data)).get() ?? null);
         },
         createSession(data) {
             return client.insert(sessions).values(data).returning().get();
         },
-        getSessionAndUser(data) {
-            return (client
+        async getSessionAndUser(data) {
+            return (await client
                 .select({
                 session: sessions,
                 user: users,
@@ -90,8 +90,8 @@ export function SQLiteDrizzleAdapter(client, tableFn = defaultSqliteTableFn) {
                 .returning()
                 .get();
         },
-        linkAccount(rawAccount) {
-            const updatedAccount = client
+        async linkAccount(rawAccount) {
+            const updatedAccount = await client
                 .insert(accounts)
                 .values(rawAccount)
                 .returning()
@@ -109,8 +109,8 @@ export function SQLiteDrizzleAdapter(client, tableFn = defaultSqliteTableFn) {
             };
             return account;
         },
-        getUserByAccount(account) {
-            const results = client
+        async getUserByAccount(account) {
+            const results = await client
                 .select()
                 .from(accounts)
                 .leftJoin(users, eq(users.id, accounts.userId))
@@ -128,9 +128,9 @@ export function SQLiteDrizzleAdapter(client, tableFn = defaultSqliteTableFn) {
         createVerificationToken(token) {
             return client.insert(verificationTokens).values(token).returning().get();
         },
-        useVerificationToken(token) {
+        async useVerificationToken(token) {
             try {
-                return (client
+                return (await client
                     .delete(verificationTokens)
                     .where(and(eq(verificationTokens.identifier, token.identifier), eq(verificationTokens.token, token.token)))
                     .returning()
diff --git a/node_modules/@auth/drizzle-adapter/src/index.ts b/node_modules/@auth/drizzle-adapter/src/index.ts
index fcb67e2..8104dcf 100644
--- a/node_modules/@auth/drizzle-adapter/src/index.ts
+++ b/node_modules/@auth/drizzle-adapter/src/index.ts
@@ -26,6 +26,7 @@ import { SqlFlavorOptions, TableFn } from "./lib/utils.js"
 import { is } from "drizzle-orm"
 
 import type { Adapter } from "@auth/core/adapters"
+import { LibSQLDatabase } from "drizzle-orm/libsql/driver.js"
 
 /**
  * Add the adapter to your `pages/api/[...nextauth].ts` next-auth configuration object.
@@ -260,7 +261,7 @@ export function DrizzleAdapter<SqlFlavor extends SqlFlavorOptions>(
   } else if (is(db, PgDatabase)) {
     return pgDrizzleAdapter(db, table as PgTableFn)
   } else if (is(db, BaseSQLiteDatabase)) {
-    return SQLiteDrizzleAdapter(db, table as SQLiteTableFn)
+    return SQLiteDrizzleAdapter(db as LibSQLDatabase, table as SQLiteTableFn)
   }
 
   throw new Error(
diff --git a/node_modules/@auth/drizzle-adapter/src/lib/sqlite.ts b/node_modules/@auth/drizzle-adapter/src/lib/sqlite.ts
index 81fdaa5..0def9f5 100644
--- a/node_modules/@auth/drizzle-adapter/src/lib/sqlite.ts
+++ b/node_modules/@auth/drizzle-adapter/src/lib/sqlite.ts
@@ -9,6 +9,7 @@ import {
 } from "drizzle-orm/sqlite-core"
 
 import type { Adapter, AdapterAccount } from "@auth/core/adapters"
+import { LibSQLDatabase } from "drizzle-orm/libsql"
 
 export function createTables(sqliteTable: SQLiteTableFn) {
   const users = sqliteTable("user", {
@@ -67,7 +68,7 @@ export function createTables(sqliteTable: SQLiteTableFn) {
 export type DefaultSchema = ReturnType<typeof createTables>
 
 export function SQLiteDrizzleAdapter(
-  client: InstanceType<typeof BaseSQLiteDatabase>,
+  client: LibSQLDatabase,
   tableFn = defaultSqliteTableFn
 ): Adapter {
   const { users, accounts, sessions, verificationTokens } =
@@ -81,20 +82,20 @@ export function SQLiteDrizzleAdapter(
         .returning()
         .get()
     },
-    getUser(data) {
-      return client.select().from(users).where(eq(users.id, data)).get() ?? null
+    async getUser(data) {
+      return await client.select().from(users).where(eq(users.id, data)).get() ?? null
     },
-    getUserByEmail(data) {
+    async getUserByEmail(data) {
       return (
-        client.select().from(users).where(eq(users.email, data)).get() ?? null
+        await client.select().from(users).where(eq(users.email, data)).get() ?? null
       )
     },
     createSession(data) {
       return client.insert(sessions).values(data).returning().get()
     },
-    getSessionAndUser(data) {
+    async getSessionAndUser(data) {
       return (
-        client
+        await client
           .select({
             session: sessions,
             user: users,
@@ -125,8 +126,8 @@ export function SQLiteDrizzleAdapter(
         .returning()
         .get()
     },
-    linkAccount(rawAccount) {
-      const updatedAccount = client
+    async linkAccount(rawAccount) {
+      const updatedAccount = await client
         .insert(accounts)
         .values(rawAccount)
         .returning()
@@ -146,8 +147,8 @@ export function SQLiteDrizzleAdapter(
 
       return account
     },
-    getUserByAccount(account) {
-      const results = client
+    async getUserByAccount(account) {
+      const results = await client
         .select()
         .from(accounts)
         .leftJoin(users, eq(users.id, accounts.userId))
@@ -173,10 +174,10 @@ export function SQLiteDrizzleAdapter(
     createVerificationToken(token) {
       return client.insert(verificationTokens).values(token).returning().get()
     },
-    useVerificationToken(token) {
+    async useVerificationToken(token) {
       try {
         return (
-          client
+          await client
             .delete(verificationTokens)
             .where(
               and(
diff --git a/node_modules/@auth/drizzle-adapter/src/lib/utils.ts b/node_modules/@auth/drizzle-adapter/src/lib/utils.ts
index 0306e33..8154ca6 100644
--- a/node_modules/@auth/drizzle-adapter/src/lib/utils.ts
+++ b/node_modules/@auth/drizzle-adapter/src/lib/utils.ts
@@ -1,6 +1,5 @@
 import { MySqlDatabase } from "drizzle-orm/mysql-core"
 import { PgDatabase } from "drizzle-orm/pg-core"
-import { BaseSQLiteDatabase } from "drizzle-orm/sqlite-core"
 
 import type { AnyMySqlTable, MySqlTableFn } from "drizzle-orm/mysql-core"
 import type { AnyPgTable, PgTableFn } from "drizzle-orm/pg-core"
@@ -8,10 +7,11 @@ import type { AnySQLiteTable, SQLiteTableFn } from "drizzle-orm/sqlite-core"
 import type { DefaultSchema as PgSchema } from "./pg.js"
 import type { DefaultSchema as MySqlSchema } from "./mysql.js"
 import type { DefaultSchema as SQLiteSchema } from "./sqlite.js"
+import { LibSQLDatabase } from "drizzle-orm/libsql/driver.js"
 
 export type AnyMySqlDatabase = MySqlDatabase<any, any>
 export type AnyPgDatabase = PgDatabase<any, any, any>
-export type AnySQLiteDatabase = BaseSQLiteDatabase<any, any, any, any>
+export type AnySQLiteDatabase = LibSQLDatabase
 
 export interface MinimumSchema {
   mysql: MySqlSchema & Record<string, AnyMySqlTable>
